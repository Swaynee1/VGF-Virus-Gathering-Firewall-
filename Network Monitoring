import asyncio
import subprocess
import time
import logging
import smtplib
from email.mime.text import MIMEText
import sqlite3
from flask import Flask, render_template, jsonify
from concurrent.futures import ThreadPoolExecutor
from ratelimit import limits, sleep_and_retry
from cachetools import TTLCache
from collections import defaultdict
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError

# Define the devices to monitor with their IP addresses and thresholds
devices = {
    'Device 1': {'ip': '192.168.1.1', 'threshold': 10},
    'Device 2': {'ip': '192.168.1.2', 'threshold': 5},
    'Device 3': {'ip': '192.168.1.3', 'threshold': 8}
}

# Email configuration
email_sender = 'your_email@example.com'
email_password = 'your_email_password'
email_recipient = 'recipient@example.com'
email_smtp_server = 'smtp.example.com'
email_smtp_port = 587

# Logging configuration
logging.basicConfig(filename='network_monitoring.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database initialization
Base = declarative_base()

class DeviceStatus(Base):
    __tablename__ = 'device_status'
    id = Column(Integer, primary_key=True, autoincrement=True)
    device_name = Column(String)
    device_ip = Column(String)
    timestamp = Column(DateTime, default=time.strftime('%Y-%m-%d %H:%M:%S'))
    status = Column(Integer)

engine = create_engine('sqlite:///network_monitoring.db')
Session = sessionmaker(bind=engine)
session = Session()

def initialize_database():
    Base.metadata.create_all(engine)

# Data visualization with Flask and Chart.js
app = Flask(__name__)

# Cache initialization
cache = TTLCache(maxsize=1000, ttl=60)

@app.route('/')
def index():
    return render_template('dashboard.html')

@app.route('/api/data')
def get_data():
    cached_data = cache.get('chart_data')
    if cached_data:
        return jsonify(cached_data)

    try:
        rows = session.query(DeviceStatus.device_name, DeviceStatus.timestamp, DeviceStatus.status).order_by(DeviceStatus.timestamp).all()
        data = {
            'labels': [],
            'datasets': []
        }
        device_names = []
        for row in rows:
            device_name = row[0]
            timestamp = row[1]
            status = row[2]

            if device_name not in device_names:
                device_names.append(device_name)
                data['datasets'].append({
                    'label': device_name,
                    'data': [],
                    'fill': False
                })

            index = device_names.index(device_name)
            data['labels'].append(timestamp)
            data['datasets'][index]['data'].append(status)

        cache['chart_data'] = data
        return jsonify(data)
    except SQLAlchemyError as e:
        logging.error(f"Error retrieving data from the database: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@limits(calls=1, period=60)
@sleep_and_retry
def check_device_availability(device_name, device_ip, threshold):
    try:
        # Execute ping command to check device availability
        result = subprocess.run(['ping', '-c', '4', device_ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=10)

        # Check the return code to determine if the device is reachable
        if result.returncode == 0:
            status = 100
        else:
            status = 0
            send_alert(device_name, device_ip)

        # Store status in the database
        device_status = DeviceStatus(device_name=device_name, device_ip=device_ip, status=status)
        session.add(device_status)
        session.commit()

        # Check if the status exceeds the threshold
        if status > threshold:
            logging.warning(f"Device '{device_name}' at {device_ip} exceeded the threshold: {status}%")
    except subprocess.TimeoutExpired:
        logging.error(f"Timeout expired while checking device '{device_name}' at {device_ip}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error checking device '{device_name}' at {device_ip}: {str(e)}")
    except Exception as e:
        logging.error(f"An unexpected error occurred while checking device '{device_name}' at {device_ip}: {str(e)}")

async def monitor_devices():
    while True:
        logging.info('Monitoring devices...')
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')

        tasks = []
        for device_name, device_info in devices.items():
            device_ip = device_info['ip']
            threshold = device_info['threshold']
            tasks.append(asyncio.create_task(check_device_availability(device_name, device_ip, threshold)))

        await asyncio.gather(*tasks)
        await asyncio.sleep(60)  # Wait for 60 seconds before the next monitoring cycle

def send_alert(device_name, device_ip):
    message = f"Device '{device_name}' at {device_ip} is unreachable."
    subject = f"Network Monitoring Alert - Device Unreachable: {device_name}"
    email_body = f"Subject: {subject}\n\n{message}"

    try:
        # Connect to the email server
        with smtplib.SMTP(email_smtp_server, email_smtp_port) as server:
            server.starttls()
            server.login(email_sender, email_password)

            # Send email notification
            server.sendmail(email_sender, email_recipient, email_body)
        logging.info(f"Alert email sent for '{device_name}'.")
    except smtplib.SMTPException as e:
        logging.error(f"Error sending email alert for '{device_name}': {str(e)}")
    except Exception as e:
        logging.error(f"An unexpected error occurred while sending email alert for '{device_name}': {str(e)}")

def initialize_logging():
    logging.basicConfig(filename='network_monitoring.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    file_handler = logging.FileHandler('network_monitoring.log')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logging.getLogger().addHandler(file_handler)

def setup_executor():
    executor = ThreadPoolExecutor()
    app.config['executor'] = executor

def start_monitoring():
    asyncio.ensure_future(monitor_devices())

def main():
    logging.info('Network Monitoring System')
    logging.info('-------------------------')

    # Initialize the database
    initialize_database()

    # Initialize logging
    initialize_logging()

    # Setup executor
    setup_executor()

    # Start monitoring devices
    start_monitoring()

    # Start the Flask web server for the dashboard
    app.run(debug=True)

if __name__ == '__main__':
    main()
